/* A homework problem solution for the CS:APP3e

   Copyright (C) 2021 Tongjie Liu <tongjieandliu@gmail.com>.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.*/

	We have p = x * y
                  = (2^64 * x_h + x_l) * (2^64 * y_h + y_l)
                  =   2^128 * x_h * y_h			term 1
                    + 2^64 * (x_h * y_l + x_l * y_h)	term 2
                    + x_l * y_l				term 3,


	After combining this with p = 2^64 * p_h + p_l, we then have:

	p_h = LOW_64BITS(
		  LOW_64BITS(x_h * y_l)
		+ LOW_64BITS(x_l * y_h)
		+ HIGH_64BITS(x_l * y_l)
	      )

	p_l = LOW_64BITS(x_l * y_l).

The reasons behind this are:
	1. Term 1 has the factor 2^128, therefore it will not affect the
128-bit result;
	2. Term 2 has the factor 2^64, therefore it will only affects p_h,
but not p_l;
	3. Term 3 has no such factor, therefore it will affect both p_h and p_l.


Note that:
	1. X_l and y_l are both unsigned 64-bit values, x_h and y_h are both signed
64-bit values. Therefore integer multiplications in the term 2 can be represented as
signed multiplications, and the integer multiplication in the term 3 as unsigned mul-
tiplication.
	2. According to the sign extension, the high-order 64-bit in a 128-bit value
expanded from a 64-bit value is just a repetition of the most significant bit of the
original 64-bit value.
	For example, x_h = [x_63, x_63, ... , x_63], here x_63 is the most significant
bit of the original 64-bit value x.
	Therefore, x_h = x >> 63, here ">>" represents arithmetic right shift operation.



store_prod:
	movq	%rdx, %rax	# %rax = y_l
	cqto			# quad word -> oct word:
				#	%rdx = y_h
				#	%rax = y_l


	movq	%rsi, %rcx
	sarq	$63, %rcx	# %rcx = x_h


	imulq	%rax, %rcx	# %rcx = LOW_64BITS(x_h * y_l)

	imulq	%rsi, %rdx	# %rdx = LOW_64BITS(y_h * x_l)

	addq	%rdx, %rcx	# %rcx = LOW_64BITS(
						  LOW_64BITS(x_h * y_l)
						+ LOW_64BITS(y_h * x_l)
				         )

	mulq	%rsi		# %rdx = HIGN_64BITS(x_l * y_l)
				# %rax = LOW_64BITS(x_l * y_l)

	addq	%rcx, %rdx	# %rdx = LOW_64BITS(
						       LOW_64BITS(x_h * y_l)
						     + LOW_64BITS(x_l * y_h)
						     + HIGH_64BITS(x_l * y_l)
						   )


	movq	%rax, (%rdi)	# save low-order 64-bit
	movq	%rdx, 8(%rdi)	# save hign-order 64-bit


	ret
